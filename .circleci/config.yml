version : 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [frontend_build]

      - run :
          name: Build frontend
          command : |
            cd frontend
            npm install
            npm run build

      - save_cache :
          paths : [frontend/node-modules]
          key   : frontend_build

      - slack/notify:
          event: fail
          template: basic_fail_1


  build-backend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [backend_build]

      - run :
          name: Build backend
          command : |
            cd backend
            npm install
            npm run build

      - save_cache :
          paths : [backend/node-modules]
          key  : backend_build

      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [frontend_build]
      - run :
          name: Testing frontend
          command : |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [backend_build]
      - run :
          name: Testing Backend
          command : |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [frontend_build]
      - run :
          name: Scanning front end.
          command : |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker :
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache :
          keys : [backend_build]
      - run :
          name: Scanning back end.
          command : |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker :
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install tar
          command: |
            yum -y install tar gzip

      - run :
          name : Ensure backend infrastructure is ready
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run :
          name : Ensure frontend infrastructure is ready
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  destroy-infrastructure:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      docker :
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Destroy environments
            # when: on_fail
            command: |
              aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

              aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker :
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys :
          fingerprints : ["f9:87:53:db:38:3f:1f:cf:d9:16:09:23:26:7b:88:38"]

      - attach_workspace:
          at : ~/

      - run :
          name: Install Dependencies
          command : |
            cd ~/project/.circleci/ansible
            apk add --update ansible

      - run :
          name : Configure server
          command : |
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

workflows :
  default:
    jobs:
      - build-frontend:
          context: Access_Token
      - build-backend:
          context: Access_Token
      - test-frontend :
          requires : [build-frontend]
          context: Access_Token
      - test-backend :
          requires : [build-backend]
          context: Access_Token
      - scan-frontend :
          requires : [build-frontend]
          context: Access_Token
      # - scan-backend :
      #     requires : [build-backend]
      #     context: Access_Token
      - deploy-infrastructure :
          requires: [test-frontend, test-backend, scan-frontend]
      - configure-infrastructure :
          requires: [deploy-infrastructure]
